FORMAT: 1A
HOST: http://cengage.com/adaptive/api/v1

# AdaptiveAPI

The Adpaptive API allows developers to create adaptive learning applications.
It is intended to abstract calls to 3rd party (internal or external) adaptive 
learning engines.  It has been developed based on a specific 3rd party engine and
will most likely need to be extended to interact with other engines.

# Adaptive API Root [/]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommend to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
            "adaptive_url": "/adaptive/api/v1"
        }

## Group Content

Resources related to Content.

## Content [/content/{id_type}/{content_id}]

A Content object has the following attributes:

+ id: the Cengage Content ID
+ partner_id: the corresponding 3rd party's Content ID
+ type: the type of content (narrative, assessment, media, keyterm)
+ child_ids: in case of narrative content, the IDs of the children content
+ urn: in case of media content, the corresponding cxp_urn
+ content_location: Cengage location (cxp, narrative_svc)
+ isbn: the SSO isbn of the corresponding book to which the content belongs
+ chapter_id: an array of chapter IDs to which the content belongs
+ learning_obj_id: an array of learning objective IDs to which the content belongs
+ is_target: boolean indicating whether content is target material
+ is_recommendable: boolean indicating whether content is recommendable material


+ Parameters
    + id_type: "cengage, other" (required, string) - party to which the ID being queried belongs
    + content_id: "cengageID, 3RDPartyID" (required, string) - ID of the content being queried
    
### Get Content Details [GET]

This action will retrieve content details from CES.

Ex:

/content/cengage/"cengageID"

/content/other/"3rdPartyID"


+ Response 200 (application/json)

        {
            "id": "cengage_id",
            "partner_id": "3rd party content ID",
            "type": "content_type",
            "name": "title",
            "child_ids": "b_head_id, c_head_id",
            "content_location": "cxp",
            "urn": "urn_id",
            "isbn": "sso_isbn",
            "chapter_id":[{
                chapter_id_1,
                chapter_id_2]},
            "learning_obj_id":[{
                lo_id_1,
                lo_id_2}],
            "is_target": "true or false",
            "is_recommendable": "true or false"
        }


### POST Content into CES [POST]

This action allows you to insert a new piece of content into CES.

    
+ Request (application/json)

        {
            "id": "cengage_id",
            "partner_id": "3rd party content ID",
            "type": "content_type",
            "name": "title",
            "child_ids": "b_head_id, c_head_id",
            "cxp_urn": "urn_id",
            "isbn": "sso_isbn",
            "chapter_id":[{
                chapter_id_1,
                chapter_id_2}],
            "learning_obj_id":[{
                lo_id_1,
                lo_id_2}],
            "is_target": "true or false",
            "is_recommendable": "true or false"
        }

+ Response 200

### PUT Content into CES [PUT]

This action allows you to update a piece of content in CES.  
You may provide a partial update (replace only specified params) or replace everything.
    
+ Request (application/json)

        {
            "id": "cengage_id",
            "partner_id": "3rd party content ID",
            "type": "content_type",
            "name": "title",
            "child_ids": "b_head_id, c_head_id",
            "cxp_urn": "urn_id",
            "isbn": "sso_isbn",
            "chapter_id":[{
                chapter_id_1,
                chapter_id_2}],
            "learning_obj_id"[{
                lo_id_1,
                lo_id_2}],
            "is_target": "true or false",
            "is_recommendable": "true or false"
        }

+ Response 200

### Delete Content from CES [DELETE]

This action allows you to delete a piece of content in CES.  


+ Response 200

##Group Course
Resources related to a Course.

## Course [/course/{course_id}/]
A Course object has the following attributes:

+ id: Cengage course ID
+ title: the course title
+ isbn: the SSO isbn of the course
+ partner_id: 3rd party course ID
+ start_date: Course start date
+ end_date: Course end date
+ graph_id: 3rd party ID of the course graph
+ is_gated: boolean indicating whether course is gated
+ in_progress: boolean indicating whether the course has begun


+ Parameters
    + course_id: "coursekey" (required, string) - Cengage Course ID
       
### GET Course Details [GET]
This action will retrieve course details from CES.

+ Response 200 (application/json)

        {
            "id": "cengage course key",
            "partner_id": "3rd party course ID",
            "title": "title",
            "isbn": "sso_isbn",
            "start_date":"2016-01-01T09:00:00.000Z",
            "end_date":"2017-01-01T09:00:00.000Z",
            "graph_id": "graphID",
            "is_gated": "true or false"
        }
        
### POST Course [POST]
This action will create a Course in 3rd party and add to CES.  
It returns the 3rd party course ID & other course details.
    
    
+ Request (application/json)

        {
            "graph_id": "graphID",
            "course_name": "title",
            "start_date": "2016-01-01T09:00:00.000Z",
            "end_date": "2017-01-01T09:00:00.000Z",
            "is_gated": "true",
            "isbn": "sso_isbn"
        }
        
+ Response 200 (application/json)

        {
            "id": "cengage course key",
            "partner_id": "3rd party course ID",
            "title": "title",
            "isbn": "sso_isbn",
            "start_date":"2016-01-01T09:00:00.000Z",
            "end_date":"2017-01-01T09:00:00.000Z",
            "graph_id": "graphID",
            "is_gated": "true",
            "in_progress": "true"
        }
        
### Delete Course [DELETE]
This action will delete a course in CES & send any supported action to 3rd party.

+ Response 200 (application/json)

##Group User
Resources related to a User.

##Group User Account
Resources related to a User Account

## User Account [/user/{uuid}/account]
A User Account object has the following attributes:

+ uuid: Cengage user ID
+ partner_id: 3rd party user ID
+ access_token: 3rd party access token
+ refresh_token: 3rd party refresh token
+ auth_code: 3rd party auth code
+ expires: authentication expiration date
+ last_login: time of last login

+ Parameters
    + uuid: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6" (required, string) - Cengage User ID

### GET User Account [GET]
Get 3rd Party User Account ID from CES.

+ Response 200 (application/json)

        {
            "uuid": "cengage user ID",
            "partner_id": "3RDPARTYID",
            "access_token": "3rd party access token",
            "refresh_token": "3rd party refresh token",
            "auth_code": "3rd party auth code",
            "expires": "authentication expiration date",
            "last_login": "time of last login"
        }


### POST User Account [POST]
Create & authenticate User Account in 3rd party & add to CES.

+ Response 200 (application/json)

        {
            "uuid": "cengage user ID",
            "partner_id": "3RDPARTYID",
            "access_token": "3rd party access token",
            "refresh_token": "3rd party refresh token",
            "auth_code": "3rd party auth code",
            "expires": "2017-01-01T09:00:00.000Z",
            "last_login": "2016-01-01T09:00:00.000Z"
        }
        
### PUT Authentication of User Account - refresh [PUT]
Refresh authentication of User Account in 3rd party & CES.

+ Response 200 (application/json)

        {
            "uuid": "cengage user ID",
            "partner_id": "3RDPARTYID",
            "access_token": "3rd party access token",
            "refresh_token": "3rd party refresh token",
            "auth_code": "3rd party auth code",
            "expires": "2018-01-01T09:00:00.000Z",
            "last_login": "2017-01-01T09:00:00.000Z"
        }        
        
##Group User Registration
Resources related to a User Registration.

## User Registration [/user/{uuid}/registration]


## User Registration by Course [/{uuid}/{course_id}]
A User Registration object has the following attributes:

+ uuid: Cengage user ID
+ course_id: Cengage Course Key
+ reg_id: 3rd party Registration ID
+ type: type of user (instructor, learner, TA, admin)


### GET User Registration by Course [GET] 
Gets 3rd Party User Registration ID & Type of User.

+ Parameters
    + uuid:     "cengage UUID" (required, string) - Cengage User ID
    + course_id: "MTABCD1EF23G" (required, string) - Cengage Course Key

+ Response 200 (application/json)

        {
            "reg_id": "3rd party registration ID",
            "type": "learner||instructor||TA||admin"
        }


### POST User Registration [POST]
Registers a User to a Course.  
If User is of Type "learner", this call will register him/her to all Goals in the Course.

+ Request (application/json)

        {
            "type": "learner||instructor||TA||admin"
        }
+ Response 200 (application/json)

        {
            "reg_id": "3rd party registration ID"
        }
        
### DELETE User Registration [DELETE]
Unregister the User from the Course.

+ Response 200 
        
##Group Goals
Resource related to the Goals for a Course.

## Goal [/goal/{qualifier}/{attribute}]
A Goal object has the following attributes:

+ goal_id: the 3rd party Goal ID
+ course_id: the Cengage Course Key to which the Goal belongs
+ activity_id: the Cengage activity ID for the Goal
+ name: the name of the Goal
+ start_date: available date of the Goal
+ target_date: date by which the Goal should be met
+ target_score: score needed to achieve mastery of the Goal
+ target_modules: list of target modules or a container id
+ reco_modules: list of recommendable modules
+ max_reco_size: maximum number of recommendations per request
+ metrics_enabled: boolean indicating whether to calculate metrics on the goal

    

### GET Goals by Course or Goal Name or Goal ID [GET] 
View all Goals defined for a Course
OR View Goal by Name 
OR View Goal by ID.
Returns a list of Goals.

Query parameters:
qualifier = "course_id" || "name" || "goal_id"

Ex: 

/goal/course_id/"MTcourseKey"

/goal/name/"goalName"

/goal/goal_id/"goalID"

+ Response 200 (application/json)

        {
            [
            "id" : "goal ID",
            "name" : "Name of Goal" ,
            "target_modules": [ {
                        "module_id" :  "mref-853cb3c2-3ceb-4a5a-bdc0-ebce7895d8d3",
                        "target_date" : "2013-04-12T17:00:00.000Z",
                        "target_score" : 0.75 } ],
            "reco_modules" : [],
            "rec_modules_alt" : {
                        "include" :  [
                            { "taxon_id" : "tref-TOC:Ch3|Section1" },
                            { "taxon_id" : "tref-TOC:Ch3|Section2" } ,
                            { "module_id" :"mref-744ab4f1-3fbb-5b4c-dba0-ffbb8141a6a3" } ],
                        "exclude" : [
                            { "taxon_id" : "tref-TOC:Ch3|Section1|Exam" },
                            { "taxon_id" : "tref-TOC:Ch3|Section2|Exam" } ,
                            { "module_id" :"mref-744ab513-3fbb-5b4c-dba0-ffbb8141a6a3" } ]},
            "max_reco_size" : 5,
            "start_date" : "2016-01-01T09:00:00.000Z",
            "metrics_enabled" : true
            ]
        }
        
### POST a Goal to Course [POST] 
Add a Goal to Course & Register All Students to the Goal.  
Returns the Goal ID.

+ Request (application/json)

        {
            "course_id" : "Cengage course key",
            "name" : "Name of Goal" ,
            "target_modules": [ {
                        "module_id" :  "mref-853cb3c2-3ceb-4a5a-bdc0-ebce7895d8d3",
                        "target_date" : "2013-04-12T17:00:00.000Z",
                        "target_score" : 0.75 } ],
            "reco_modules" : [],
            "rec_modules_alt" : {
                        "include" :  [
                            { "taxon_id" : "tref-TOC:Ch3|Section1" },
                            { "taxon_id" : "tref-TOC:Ch3|Section2" } ,
                            { "module_id" :"mref-744ab4f1-3fbb-5b4c-dba0-ffbb8141a6a3" } ],
                        "exclude" : [
                            { "taxon_id" : "tref-TOC:Ch3|Section1|Exam" },
                            { "taxon_id" : "tref-TOC:Ch3|Section2|Exam" } ,
                            { "module_id" :"mref-744ab513-3fbb-5b4c-dba0-ffbb8141a6a3" } ]},
            "max_reco_size" : 5,
            "start_date" : "2016-01-01T09:00:00.000Z",
            "metrics_enabled" : true
        }
        
+ Response 200 (application/json)

        {
            "goal_id": "goal ID"
        }
        
### PUT an existing Goal in a Course - update [PUT] 
Updates an existing Goal in a Course.  Accepts a partial or complete update.
"id" is required.

+ Request (application/json)

        {
            "id" : "goal ID",
            "name" : "Name of Goal" ,
            "target_modules": [ {
                        "module_id" :  "mref-853cb3c2-3ceb-4a5a-bdc0-ebce7895d8d3",
                        "target_date" : "2013-04-12T17:00:00.000Z",
                        "target_score" : 0.75 } ],
            "reco_modules" : [],
            "rec_modules_alt" : {
                        "include" :  [
                            { "taxon_id" : "tref-TOC:Ch3|Section1" },
                            { "taxon_id" : "tref-TOC:Ch3|Section2" } ,
                            { "module_id" :"mref-744ab4f1-3fbb-5b4c-dba0-ffbb8141a6a3" } ],
                        "exclude" : [
                            { "taxon_id" : "tref-TOC:Ch3|Section1|Exam" },
                            { "taxon_id" : "tref-TOC:Ch3|Section2|Exam" } ,
                            { "module_id" :"mref-744ab513-3fbb-5b4c-dba0-ffbb8141a6a3" } ]},
            "max_reco_size" : 5,
            "start_date" : "2016-01-01T09:00:00.000Z",
            "metrics_enabled" : true
        }
        
+ Response 200

### DELETE an existing Goal from a Course [DELETE] 
Deletes an existing Goal from a Course.  

+ Request (application/json)

        {
        "course_id": "Cengage course key",
        "goal_id": "ID of the goal"
        }
        
+ Response 200
        
## Group Events

Resources related to student events.

## Event [/content/{uuid}/{content_id}/{type}]

An Event object has the following attributes:
+ uuid: ID of the user for which to post event
+ content_id: ID of the content for which to post event
+ start_time: the time the event was started
+ end_time: the time the event was completed
+ type: the type of content (narrative, assessment, media, etc)
+ is_correct: boolean to indicate if assessment material is correct
+ reco_id: ID of the recommendation for which an event is being sent

### POST a completed event [POST] 
Post a completed instructional or assessment event for a student. 
Automatically sends a recommendation followed event.

+ Request (application/json)

        {
            start_time: "",
            end_time: "",
            is_correct: "true", //assessment only
            reco_id: "recommendation ID"
        }
        
+ Response 200 (application/json)

## Group Recommendations

Resources related to Recommendations.

## Recommendation [/recommendation/{uuid}/{goal_id}]

A Recommendation object has the following attributes:
+ uuid: ID of the student for which to request a recommended piece of content
+ goal_id: the ID of the goal that the student is working toward
+ reco_id: the ID of the next recommendation to serve the student

### Get the next recommendation [GET]
Get the next recommendation for the user.
Automatically sends a focus event.

+ Response 200 (application/json)

        {
            reco_id: "recommendation ID"
        }
        
## Group Reports

Resources related to Reporting metrics.

## Report [/report/{data_grouping}/{id}/{metric}]

A Report object has the following attributes:
+ data_grouping: type of data for which to generate a report (course or student)
+ id: ID of the user or course, depending on the data grouping, for which to request a report
+ course_id: ID of the course for which to request a report
+ metric: name of the reporting metric (active_time, proficiency, expected_score, readiness)
+ start_date: start date of reporting metric
+ end_date: end date of reporting metric
+ taxon_ids: list of taxon ids for which to generate a report
+ goal_ids: list of goal ids for which to generate a report
+ registration_offset: number of registrations which will appear in first row
+ registrations_per_page: max number of registrations per page
+ registration_id: student's registration ID
+ dimensions: list of reporting dimensions
+ metrics: list of metrics being reported
+ next: next registration offset & per page
+ previous: previous registration offset & per page
+ column_headers: lists order of content
+ rows: rows of data containing reporting values


### POST a report [POST]
Get a report for a specific student User or for all Users Registered to a Course

+ Parameters
    + data_grouping:     "course" (required, string) - Cengage Course ID
    + id: "courseKey" (required, string) - Cengage Course Key
    + metric : "proficiency" (required, string) - reporting metric
    
+ Request (application/json)

        {
            "end_date": "2013-10-24",
            "start_date": "2013-10-23",
            "taxon_ids": [
                "LearningObj1"
            ]
            
        }
        
+ Response 200 (application/json)

        {
            "column_headers":
            [
                "Define Management Roles"
            ],
            "dimensions": 
            [
                "date"
            ],
            "metrics": 
            [
                "proficiency"
            ],
            "next": 
            {
                "registration_offset": 6,
                "registrations_per_page": 5
            },
            "previous": null,
            "query": 
            {
                "end_date": "2013-10-23"
                "registration_offset": 0,
                "registrations_per_page": 5,
                "start_date": "2013-10-23",
                "taxon_ids": 
                [
                    "LearningObj1"
                ]
            },
            "rows": 
            [
                {
                    "date": "2013-10-23",
                    "proficiencies": 
                    [
                        {
                            "conf": 0.4784821679711042,
                            "relative_estimate": 2
                        }
                    ],
                    "registration_id": "c434039c-dc74-4449-b83c-69852ce6dc88"
                },
                {
                    "date": "2013-10-23",
                    "proficiencies": 
                    [
                        {
                            "conf": 0.2,
                            "relative_estimate": 2
                        }
                    ],
                    "registration_id": "e0649572-5fb5-4a60-ba9e-4d82386bd2ed"
                },
                {
                    "date": "2013-10-23",
                    "proficiencies": 
                    [
                        {
                            "conf": 0.2,
                            "relative_estimate": 2
                        }
                    ],
                    "registration_id": "145810e1-b6e2-4e01-b327-892ced4f9a60"
                },
                {
                    "date": "2013-10-23",
                    "proficiencies": 
                    [
                        {
                            "conf": 0.2716459119537056,
                            "relative_estimate": 3
                        }
                    ],
                    "registration_id": "15e50c1e-467f-4d6a-a950-0935c22f65c5"
                },
                {
                    "date": "2013-10-23",
                    "proficiencies": 
                    [
                        {
                            "conf": 0.22248790082190545,
                            "relative_estimate": 3
                        }
                    ],
                    "registration_id": "3f10a2fd-c14a-4f0d-896c-6127851dd335"
                }
            ]
        }
        
        


        









        
        
        
        
    
        










